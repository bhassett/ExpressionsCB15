(function (d) { function E(a) { n = a } var n = {}, a, z = !1, q = "", r = "", v = "", w = "", x = "", y = "", A = "", B = "", D = { submitButtonID: "", isAllowShipping: !1, addressMatchDialogContainerID: "", errorContainerId: "", progressContainterId: "", buttonContainerId: "", isWithShippingAddress: !1, pluginTemplateCss: "components/address-verification/index.css", basePluginTemplateCss: "components/address-verification/skin/index.css", pluginTemplate: "components/address-verification/skin/jquery.realtime.address.verification.tmpl.min.html", basePluginTemplate: "components/address-verification/skin/jquery.realtime.address.verification.tmpl.min.html", billingInputID: { POSTAL_CODE: "BillingAddressControl_txtPostal", CITY: "BillingAddressControl_txtCity", STATE: "BillingAddressControl_txtState", COUNTRY: "BillingAddressControl_drpCountry", STREET_ADDRESS: "BillingAddressControl_txtStreet", CITY_STATE_SELECTOR: "billing-city-states" }, billingLabelID: { POSTAL_CODE: "", CITY: "", STATE: "", STREET_ADDRESS: "" }, shippingInputID: { POSTAL_CODE: "ShippingAddressControl_txtPostal", CITY: "ShippingAddressControl_txtCity", STATE: "ShippingAddressControl_txtState", COUNTRY: "ShippingAddressControl_drpCountry", STREET_ADDRESS: "ShippingAddressControl_txtStreet", RESIDENCE_TYPE: "ShippingAddressControl_drpType", CITY_STATE_SELECTOR: "shipping-city-states" }, shippingLabelID: { POSTAL_CODE: "ShippingAddressControl_lblStreet", CITY: "ShippingAddressControl_lblCity", STATE: "ShippingAddressControl_lblState", STREET_ADDRESS: "ShippingAddressControl_lblPostal" }, stringResourceKeys: "", onepagecheckout: { isTrue: !1 } }, C = !1, F = d.prototype.init; d.prototype.init = function (a, b) { var e = F.apply(this, arguments); a && a.selector && (e.context = a.context, e.selector = a.selector); "string" == typeof a && (e.context = b || document, e.selector = a); return e }; d.prototype.init.prototype = d.prototype; d.fn.RealTimeAddressVerification = { setup: function (c) { a = this; z = a.toBoolean(ise.Configuration.getConfigValue("UseShippingAddressVerification")); c && E(d.extend(D, c)); a.downloadPluginSkin(function () { }); a.downloadStringResources(a.convertObjectToArray(c.stringResourceKeys), function () { a.setStringResourcesValue(c.stringResourceKeys) }) }, attachEvents: function (a) { }, attachAddressDialogControlsEvents: function (c) { d("input:radio[name=billing-address]").click(function () { var c = d(this), e = c.attr("id"), e = d.trim(e); "use-my-billing" == e ? (d(a.selectorChecker("divSuggestedBillingAddress")).children("div").removeClass("is-div-suggested-row-active"), a.clearDefaultAddressToBeUse("divSuggestedBillingAddress")) : (d(a.selectorChecker("divSuggestedBillingAddress")).children("div").addClass("is-div-suggested-row-active"), a.setDefaultAddressToBeUse("divSuggestedBillingAddress", null)); a.setAddressControlValue(!1, c) }); d("input:radio[name=shipping-address]").click(function () { var c = d(this), e = c.attr("id"), e = d.trim(e); "use-my-shipping" == e ? (d(a.selectorChecker("divSuggestedShippingAddress")).children("div").removeClass("is-div-suggested-row-active"), a.clearDefaultAddressToBeUse("divSuggestedShippingAddress")) : (d(a.selectorChecker("divSuggestedShippingAddress")).children("div").addClass("is-div-suggested-row-active"), a.setDefaultAddressToBeUse("divSuggestedShippingAddress", null)); a.setAddressControlValue(!0, c) }); d(a.selectorChecker("submit-suggested-address")).click(function () { var b = n; a.setAddressControlValue(!1, d("input[name=billing-address]:checked")); b.isWithShippingAddress && a.setAddressControlValue(!0, d("input[name=shipping-address]:checked")); d(a.selectorChecker(b.addressMatchDialogContainerID)).dialog("destroy"); if (b.onepagecheckout.isTrue && C) return c(), !1; c() }); d(".divSuggestedAddressRow").click(function () { a.setDefaultAddressToBeUse(null, d(this)) }) }, setButtonSpinnerText: function (a, b) { a.html("<i class='icon-spin icon-spinner '></i> " + b) }, setStringResourcesValue: function (c) { var b = n; q = a.getString(c.useBillingAddressProvided); v = a.getString(c.confirmCorrectAddress); w = a.getString(c.unableToVerifyAddress); x = a.getString(c.selectMatchingBillingAddress); A = a.getString(c.gatewayErrorText); B = a.getString(c.progressText); if (b.isWithShippingAddress || !1 == a.isEmpty(c.selectMatchingShippingAddress)) y = a.getString(c.selectMatchingShippingAddress); if (b.isWithShippingAddress || !1 == a.isEmpty(c.useShippingAddressProvided)) r = a.getString(c.useShippingAddressProvided) }, downloadPluginSkin: function (c) { var b = n; d.get(b.pluginTemplate, function (e, g, h) { d("body").append(e); a.downloadCss(b.pluginTemplateCss, function () { "function" === typeof c && c() }) }) }, config: function (a) { return n = d.extend(D, a) }, requestAddressMatch: function (c) { if (!1 == z) return c(), !1; C = !1; var b = n, e = a.getInputControlValue(b.billingInputID.POSTAL_CODE), d = a.getInputControlValue(b.billingInputID.CITY), h = a.getInputControlValue(b.billingInputID.STATE), f = a.getInputControlValue(b.billingInputID.COUNTRY), m = a.getInputControlValue(b.billingInputID.STREET_ADDRESS), l = a.getInputControlValue(b.billingInputID.CITY_STATE_SELECTOR), k = a.parsedCityState(l, d, h), d = k.City, h = k.State, s = "", p = "", t = "", u = l = ""; b.isAllowShipping && b.isWithShippingAddress && (s = a.getInputControlValue(b.shippingInputID.POSTAL_CODE), p = a.getInputControlValue(b.shippingInputID.CITY), t = a.getInputControlValue(b.shippingInputID.STATE), l = a.getInputControlValue(b.shippingInputID.COUNTRY), u = a.getInputControlValue(b.shippingInputID.STREET_ADDRESS), k = a.getInputControlValue(b.shippingInputID.CITY_STATE_SELECTOR), k = a.parsedCityState(k, p, t), p = k.City, t = k.State); k = {}; k.Address = m; k.Country = f; k.PostalCode = e; k.State = h; k.City = d; f = {}; f.Address = u; f.Country = l; f.PostalCode = s; f.State = t; f.City = p; l = {}; l.billing = JSON.stringify(k); l.shipping = JSON.stringify(f); l.isResidence = a.isResidentialAddress(a.getInputControlValue(b.shippingInputID.RESIDENCE_TYPE)); a.displayRequestMessage(B); a.ajaxSecureRequest("RequestAddressBestMatch", l, function (f) { if (a.isEmpty(f.d)) return c(), !1; var k = {}; k.billing = { StreetAddress: m, City: d, State: h, PostalCode: e }; k.shipping = { StreetAddress: u, City: p, State: t, PostalCode: s }; a.showAddressMatchResult(f, k, c, b.isWithShippingAddress) }, function (a) { console.log(a) }); l = f = k = null }, showAddressMatchResult: function (c, b, e, g) { var h = a.getAddressRequestGatewayError(c); if (!1 == a.isEmpty(h)) return a.showAddressMatchResultWithGatewayError(b, e, g, h), !1; c = JSON.parse(c.d); if (!1 == a.isEmpty(c)) { h = c.length; if (0 == h) return e(), !1; if (0 < h) { var f = {}; f.billingMatch = JSON.parse(c[0].Billing); f.shippingMatch = JSON.parse(c[0].Shipping); f.enteredBilling = b.billing; f.enteredShipping = b.shipping; if (1 == h && g && (a.isEmpty([f.billingMatch[0].Address, f.billingMatch[0].City, f.billingMatch[0].PostalCode, f.billingMatch[0].State]) || a.isEmpty([f.shippingMatch[0].Address, f.shippingMatch[0].City, f.shippingMatch[0].PostalCode, f.shippingMatch[0].State]) || f.billingMatch[0].Address == f.enteredBilling.StreetAddress || f.shippingMatch[0].Address == f.enteredShipping.StreetAddress) || 1 == h && !g && (a.isEmpty([f.billingMatch[0].Address, f.billingMatch[0].City, f.billingMatch[0].PostalCode, f.billingMatch[0].State]) || f.billingMatch[0].Address == f.enteredBilling.StreetAddress)) return e(), !1; b = {}; b.useBillingAddressProvided = q; b.useShippingAddressProvided = r; b.confirmCorrectAddress = v; b.unableToVerifyAddress = w; b.selectMatchingBillingAddress = x; b.selectMatchingShippingAddress = y; f.stringResource = b; b = "multipleAddressMatchDialogTemplate"; !1 == g && (b = "multipleAddressMatchDialogNoShippingAddressTemplate"); if (1 == parseInt(c[0].AddressMatchResultLimit) || 1 == h) b = "singleAddressMatchDialogTemplate", !1 == g && (b = "singleAddressMatchDialogNoShippingAddressTemplate"); g = a.parseJqueryTemplate(b, f); d(a.selectorChecker(n.addressMatchDialogContainerID)).html(g).dialog({ autoOpen: !1, width: 700, modal: !0, resize: !1, closeOnEscape: !1, dialogClass: "no-close" }).dialog("open"); a.setDefaultAddressToBeUse("divSuggestedBillingAddress", null); a.setDefaultAddressToBeUse("divSuggestedShippingAddress", null); a.attachAddressDialogControlsEvents(e) } } }, showAddressMatchResultWithGatewayError: function (c, b, e, g) { g = {}; g.enteredBilling = c.billing; g.enteredShipping = c.shipping; c = {}; c.useBillingAddressProvided = q; c.useShippingAddressProvided = r; c.confirmCorrectAddress = v; c.unableToVerifyAddress = w; c.selectMatchingBillingAddress = x; c.selectMatchingShippingAddress = y; c.gatewayErrorText = A; g.stringResource = c; templateId = "singleAddressMatchDialogTemplate_GatewayErrorTemplate"; !1 == e && (templateId = "singleAddressMatchDialogNoShippingAddress_GatewayErrorTemplate"); e = a.parseJqueryTemplate(templateId, g); d(a.selectorChecker(n.addressMatchDialogContainerID)).html(e).dialog({ autoOpen: !1, width: 700, modal: !0, resize: !1, closeOnEscape: !1, dialogClass: "no-close" }).dialog("open"); a.setDefaultAddressToBeUse("divSuggestedBillingAddress", null); a.setDefaultAddressToBeUse("divSuggestedShippingAddress", null); a.attachAddressDialogControlsEvents(b) }, getAddressRequestGatewayError: function (a) { a = a.d.split("[error]"); return 1 < a.length ? d.trim(a[1]) : "" }, isResidentialAddress: function (c) { return a.isEmpty(c) ? !1 : "residential" == c.toLowerCase() }, parsedCityState: function (a, b, e) { var g = {}; g.City = b; g.State = e; "other" != a && (a = a.split(","), 1 < a.length ? (g.State = d.trim(a[0]), g.City = d.trim(a[1])) : (g.State = "", g.City = d.trim(a[0]))); return g }, displayRequestMessage: function (c) { var b = n, e = {}; e.value = c; c = a.parseJqueryTemplate("requestProgressTextTemplate", { msg: e }); $button = d(a.selectorChecker(b.buttonContainerId)); $divProgressMessage = d(a.selectorChecker(b.progressContainterId)); $divErrorMessage = d(a.selectorChecker(b.errorContainerId)); $button.css("display", "none"); $divProgressMessage.html(c).fadeIn("slow"); $divErrorMessage.html("").fadeOut("slow") }, setAddressControlValue: function (c, b) { var e = n, g = b.attr("data-streetAddress"), g = d.trim(g), h = b.attr("data-city"), h = d.trim(h), f = b.attr("data-state"), f = d.trim(f), m = b.attr("data-postalCode"), m = d.trim(m), l = null, k = null, s = null, p = null, t = "", u = "", q = "", r = ""; c ? (d(a.selectorChecker("shipping-enter-postal-label-place-holder")).html("<input type='hidden' id='shipping-city-states' value='other'/>"), d(a.selectorChecker("shipping-city-states")).fadeOut("slow", function () { d(".shipping-zip-city-other-place-holder").fadeIn("slow") }), l = d(a.selectorChecker(e.shippingInputID.STREET_ADDRESS)), k = d(a.selectorChecker(e.shippingInputID.CITY)), s = d(a.selectorChecker(e.shippingInputID.STATE)), p = d(a.selectorChecker(e.shippingInputID.POSTAL_CODE)), t = e.shippingLabelID.STREET_ADDRESS, u = e.shippingLabelID.CITY, q = e.shippingLabelID.STATE, r = e.shippingLabelID.POSTAL_CODE) : (d(a.selectorChecker("billing-enter-postal-label-place-holder")).html("<input type='hidden' id='billing-city-states' value='other'/>"), d(a.selectorChecker("billing-city-states")).fadeOut("slow", function () { d(".billing-zip-city-other-place-holder").fadeIn("slow") }), l = d(a.selectorChecker(e.billingInputID.STREET_ADDRESS)), k = d(a.selectorChecker(e.billingInputID.CITY)), s = d(a.selectorChecker(e.billingInputID.STATE)), p = d(a.selectorChecker(e.billingInputID.POSTAL_CODE)), t = e.billingLabelID.STREET_ADDRESS, u = e.billingLabelID.CITY, q = e.billingLabelID.STATE, r = e.billingLabelID.POSTAL_CODE); a.clearAddressControlErrorTags(l, k, s, p); a.isEmpty(g) || (d(a.selectorChecker(t)).addClass("display-none"), l.val(g)); a.isEmpty(h) || (d(a.selectorChecker(u)).addClass("display-none"), k.val(h)); a.isEmpty(f) || (d(a.selectorChecker(q)).addClass("display-none"), s.val(f)); a.isEmpty(m) || (d(a.selectorChecker(r)).addClass("display-none"), p.val(m)); p = s = k = l = null }, setDefaultAddressToBeUse: function (c, b) { var e = b; a.isEmpty(b) && (e = d(a.selectorChecker(c)).children("div").first()); if (!1 == e.hasClass("is-div-suggested-row-active")) return !1; var g = {}; origHtml = e.attr("data-originalHtmlContent"); origHtml = d.trim(origHtml); a.isEmpty(origHtml) ? (g.value = d.trim(e.html()), e.attr("data-originalHtmlContent", g.value)) : g.value = d.trim(origHtml); e.html(a.parseJqueryTemplate("defaultAddressSelectedTemplate", { content: g })); a.isEmpty(b) ? d(a.selectorChecker(c)).children("div").addClass("is-div-suggested-row-active") : e.parent("div").children("div").each(function () { var a = d(this); if (a.hasClass("use-suggested-address")) { var b = a.attr("data-originalHtmlContent"); a.removeClass("use-suggested-address").addClass("is-div-suggested-row-active").removeClass("use-suggested-address").html(b); return !1 } }); e.addClass("use-suggested-address").removeClass("is-div-suggested-row-active"); var g = null, h = e.attr("data-updateoptionid"), h = d.trim(h), g = e.attr("data-streetAddress"), g = d.trim(g), f = e.attr("data-city"), f = d.trim(f), m = e.attr("data-state"), m = d.trim(m), e = e.attr("data-postalCode"), e = d.trim(e), h = d(a.selectorChecker(h)); h.attr("data-streetAddress", g); h.attr("data-city", f); h.attr("data-state", m); h.attr("data-postalCode", e) }, clearAddressControlErrorTags: function (c, b, e, g) { d(a.selectorChecker("ise-message-tips")).fadeOut("slow"); c.removeClass("required-input"); b.removeClass("required-input"); e.removeClass("required-input"); g.removeClass("required-input").removeClass("invalid-postal").removeClass("current-input-on-focus") }, clearDefaultAddressToBeUse: function (c) { d(a.selectorChecker(c)).children("div").each(function () { var a = d(this); if (a.hasClass("use-suggested-address")) return a.removeClass("use-suggested-address"), a.html(a.attr("data-originalHtmlContent")), !1 }); d(a.selectorChecker(c)).children("div").removeClass("is-div-suggested-row-active") }, requestAddressMatchForShipping: function (c) { if (!1 == z) return c(), !1; C = !0; var b = n, e = a.getInputControlValue(b.shippingInputID.POSTAL_CODE), d = a.getInputControlValue(b.shippingInputID.CITY), h = a.getInputControlValue(b.shippingInputID.STATE), f = a.getInputControlValue(b.shippingInputID.COUNTRY), m = a.getInputControlValue(b.shippingInputID.STREET_ADDRESS), l = a.getInputControlValue(b.shippingInputID.CITY_STATE_SELECTOR), l = a.parsedCityState(l, d, h), d = l.City, h = l.State, l = { Address: "", Country: "", PostalCode: "", State: "", City: "" }, k = {}; k.Address = m; k.Country = f; k.PostalCode = e; k.State = h; k.City = d; f = {}; f.billing = JSON.stringify(l); f.shipping = JSON.stringify(k); f.isResidence = a.isResidentialAddress(a.getInputControlValue(b.shippingInputID.RESIDENCE_TYPE)); a.displayRequestMessage(B); a.ajaxSecureRequest("RequestAddressBestMatch", f, function (b) { if (a.isEmpty(b.d)) return c(), !1; var f = { billing: { StreetAddress: "", City: "", State: "", PostalCode: "" } }; f.shipping = { StreetAddress: m, City: d, State: h, PostalCode: e }; a.showShippingAddressMatchResult(b, f, c) }, function (a) { console.log(a) }); f = k = l = null }, showShippingAddressMatchResult: function (c, b, e) { var g = a.getAddressRequestGatewayError(c); if (!1 == a.isEmpty(g)) return a.showShippingAddressMatchResultWithGatewayError(b, e, g), !1; c = JSON.parse(c.d); if (!1 == a.isEmpty(c)) { g = c.length; if (0 == g) return e(), !1; if (0 < g) { var h = {}; h.billingMatch = JSON.parse(c[0].Billing); h.shippingMatch = JSON.parse(c[0].Shipping); h.enteredBilling = b.billing; h.enteredShipping = b.shipping; if (1 == g && a.isEmpty([h.shippingMatch[0].StreetAddress, h.shippingMatch[0].City, h.shippingMatch[0].PostalCode, h.shippingMatch[0].State])) return e(), !1; b = {}; b.useBillingAddressProvided = q; b.useShippingAddressProvided = r; b.confirmCorrectAddress = v; b.unableToVerifyAddress = w; b.selectMatchingBillingAddress = x; b.selectMatchingShippingAddress = y; h.stringResource = b; b = "multipleShippingAddressMatchDialogTemplate"; if (1 == parseInt(c[0].AddressMatchResultLimit) || 1 == g) b = "singleShippingAddressMatchDialogTemplate"; b = a.parseJqueryTemplate(b, h); d(a.selectorChecker(n.addressMatchDialogContainerID)).html(b).dialog({ autoOpen: !1, width: 700, modal: !0, resize: !1, closeOnEscape: !1, dialogClass: "no-close" }).dialog("open"); a.setDefaultAddressToBeUse("divSuggestedBillingAddress", null); a.setDefaultAddressToBeUse("divSuggestedShippingAddress", null); a.attachAddressDialogControlsEvents(e) } } }, showShippingAddressMatchResultWithGatewayError: function (c, b, e) { e = {}; e.enteredShipping = c.shipping; c = {}; c.useBillingAddressProvided = q; c.useShippingAddressProvided = r; c.confirmCorrectAddress = v; c.unableToVerifyAddress = w; c.selectMatchingBillingAddress = x; c.selectMatchingShippingAddress = y; c.gatewayErrorText = A; e.stringResource = c; c = a.parseJqueryTemplate("singleShippingAddressMatchDialogTemplate_GatewayErrorTemplate", e); d(a.selectorChecker(n.addressMatchDialogContainerID)).html(c).dialog({ autoOpen: !1, width: 700, modal: !0, resize: !1, closeOnEscape: !1, dialogClass: "no-close" }).dialog("open"); a.attachAddressDialogControlsEvents(b) } }; d.extend(d.fn.RealTimeAddressVerification, new jqueryBasePlugin) })(jQuery);