<?xml version="1.0" encoding="utf-8"?>

  <package displayname="Bundle Product Items" version="2.1" allowengine="true" includeentityhelper="false" debug="false">

  <!-- ###################################################################################################### -->
  <!-- Licensed by Interprise Solutions.					                                                            -->
  <!-- http://www.InterpriseSolutions.com														                                          -->
  <!-- For details on this license please visit  the product homepage at the URL above.		                    -->
  <!-- THE ABOVE NOTICE MUST REMAIN INTACT.                                                                   -->
  <!-- ###################################################################################################### -->
    
    <PackageTransform >
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ise="urn:ise"   exclude-result-prefixes="ise">
      <xsl:output method="html" omit-xml-declaration="yes" />
      
      <xsl:template match="/">
        <xsl:comment>980BA288-5A98-4D23-9D55-95974CA001AB</xsl:comment>
        <xsl:call-template name="BundleDetails"/>
      </xsl:template>


      <!--ADD TEMPLATES HERE-->
      
      <xsl:template name="BundleDetails">
        
        <xsl:if test="FIELD/BundleProduct/SourceCaller = 'productpage'">
          <script type="text/javascript" src="jscripts/jquery/jquery.bxslider.min.js"></script>
          <script>
            $(document).ready(function(){
            var counter = '<xsl:value-of select="FIELD/BundleProduct/Counter"/>';
              $('#bundle-sub-products-thumbnails-'+counter).bxSlider({slideWidth: 200, minSlides: 4,maxSlides:4,slideMargin: 20});
              $('.bx-wrapper .bx-controls-direction a').css({'z-index' : '999'}); //Fix bxSlider plugin direction overlapping
              
              //***** Hides Default StockHint/Actual Inventory Stock
              $('#pnlStockHint_' + counter).css({'display' : 'none'});
              
            });
            
          </script>
          <!--Header-->
          <h4>
            <xsl:value-of select="ise:StringResource('showproduct.aspx.87')" disable-output-escaping="yes" />
          </h4>
          
          <!--Carousel Images-->
          <div id="bundle-sub-products-thumbnails-{FIELD/BundleProduct/Counter}" class="row bxslider">
            <xsl:for-each select="FIELD/BundleProduct/Items/Item">
              <xsl:sort select="LineNum"/>
              <div class="slide">
                <a href="{ProductPageURL}" target="_blank">
                  <xsl:attribute name="id">
                    <xsl:value-of select="concat('link-bundle-sub-product-image-',Counter)"/>
                  </xsl:attribute>
                  <div class="row-fluid">
                    <center>
                      <img>
                        <xsl:attribute name="src">
                          <xsl:value-of select="IconImageSrc" />
                        </xsl:attribute>
                      
                        <xsl:if test="ItemType = 'Matrix Group'">
                        <xsl:attribute name="src">
                          <xsl:for-each select="MatrixItems/MatrixItem">
                            <xsl:if test="MatrixItemCode = ../../DefaultSelectedMatrixItemCode">
                              <xsl:value-of select="IconImageSrc" />
                            </xsl:if>
                          </xsl:for-each>
                          </xsl:attribute>
                        </xsl:if>
                      
                        <xsl:attribute name="id">
                          <xsl:value-of select="concat('img-bundle-sub-product-image-',Counter)"/>
                        </xsl:attribute>
                      </img>
                    </center>
                  </div>
                  <div class="row-fluid">
                    <div class="span2"></div>
                    <div class="span8 text-center">
                      <xsl:value-of select="ItemName" />
                    </div>
                    <div class="span2"></div>
                  </div>
                </a>
              </div>
            </xsl:for-each>
          </div>
          
          <!--View Detail Button-->
<!--
          <div style="margin-top: 50px;">
            <center>
              <div>
                <button type="button" class="btn btn-info" id="btn-bundle-view-details-{FIELD/BundleProduct/Counter}" >
                  <xsl:value-of select="ise:StringResource('showproduct.aspx.88')" disable-output-escaping="yes" />
                </button>
              </div>
              <div>
                <img id="img-stockhint-{FIELD/BundleProduct/Counter}" src="images/outofstock.png" style="display:none;"></img>
              </div>
            </center>
          </div>
-->
          
        </xsl:if>
 
        
        <div class="bundle-product-modal" style="max-height: 700px;">
          <xsl:attribute name="id">
            <xsl:choose>
              <xsl:when test="FIELD/BundleProduct/BundleHeaderID = ''">
                  <xsl:value-of select="concat('bundle-product-modal-',FIELD/BundleProduct/Counter)"/>
                </xsl:when>
              <xsl:otherwise>
                <xsl:text>bundle-product-modal-</xsl:text><xsl:value-of select="FIELD/BundleProduct/Counter"/>-<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
     
          <xsl:for-each select="FIELD/BundleProduct/Items/Item">
            <xsl:sort select="LineNum"/>
            <div class="bundle-product-row">
              
              <div class="bundle-product-col col-1">
                <center>
                  <a href="{ProductPageURL}" target="_blank">
                    <img>
                      <xsl:attribute name="src">
                        <xsl:value-of select="IconImageSrc" />
                      </xsl:attribute>

                      <xsl:if test="ItemType = 'Matrix Group'">
                        <xsl:attribute name="src">
                          <xsl:for-each select="MatrixItems/MatrixItem">
                            <xsl:if test="MatrixItemCode = ../../DefaultSelectedMatrixItemCode">
                              <xsl:value-of select="IconImageSrc" />
                            </xsl:if>
                          </xsl:for-each>
                        </xsl:attribute>
                      </xsl:if>

                      <xsl:attribute name="id">
                        <xsl:text>img-bundle-sub-product-image-modal-</xsl:text>
                        <xsl:value-of select="../../Counter"/>
                        <xsl:text>-</xsl:text>
                        <xsl:value-of select="LineNum"/>
                        <xsl:text>-</xsl:text>
                        <xsl:value-of select="UniqueID"/>
                        
                      
                    
                     
                      </xsl:attribute>
                    </img>
                  </a>
                  <img>
                    <xsl:attribute name="id">
                      <xsl:text>img-bundle-sub-product-stockhint-</xsl:text>
                      <xsl:value-of select="../../Counter"/>
                      <xsl:text>-</xsl:text>
                      <xsl:value-of select="LineNum"/>
                      <xsl:text>-</xsl:text>
                      <xsl:value-of select="UniqueID"/>
                    </xsl:attribute>

                    <xsl:attribute name="src">
                      <xsl:choose>
                        <xsl:when test="FreeStock &gt; 0">images/instock.png</xsl:when>
                        <xsl:otherwise>images/outofstock.png</xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                  </img>
                </center>
              </div>
              
              <div class="bundle-product-col col-2">
                <label>
                  <a href="{ProductPageURL}" target="_blank">
                    <strong>
                    <xsl:value-of select="ItemName" />
                  </strong>
                  </a>
                  
                </label>
                <small>
                  <xsl:value-of select="ItemDescription" />
                </small>
               

                <div class="" style="margin-top:10px;">
                  Qty:    
                  <span id="bundle-qty-{Counter}">
                    <xsl:value-of select="DisplayQuantity" />
                  </span>
                </div>

                 
                <xsl:if test="ItemType = 'Matrix Group'">
                  <xsl:if test="../../SourceCaller = 'productpage'">
                    <div class="" id="bundle-matrix-group-attribute-container-{../../Counter}-{LineNum}-{UniqueID}"></div>
                    <div id="error-message-container-{../../Counter}-{LineNum}-{UniqueID}" class="bundle-error-message-per-row" style="display:none"></div>
                  </xsl:if>
                  <xsl:if test="../../SourceCaller = 'shoppingcart'">
                    <div class="" id="bundle-matrix-group-attribute-container-{../../Counter}-{Counter}-{../../BundleHeaderID}-{UniqueID}"></div>
                    <div id="error-message-container-{../../Counter}-{Counter}-{../../BundleHeaderID}-{UniqueID}" class="bundle-error-message-per-row" style="display:none"></div>
                  </xsl:if>
                  <xsl:if test="../../SourceCaller = 'wishlist'">
                    <div class="" id="bundle-matrix-group-attribute-container-{../../Counter}-{Counter}-{../../BundleHeaderID}-{UniqueID}"></div>
                    <div id="error-message-container-{../../Counter}-{Counter}-{../../BundleHeaderID}-{UniqueID}" class="bundle-error-message-per-row" style="display:none"></div>
                  </xsl:if>
                  
             
                </xsl:if>

                
                
                
              </div>
              
              <div class="bundle-product-col col-3">
                <div class="" style="display:none">
                  Reg. Price:
                  <span style="float:right;" id="reg-price-{Counter}"><xsl:value-of select="DisplayRegularPrice" /></span>
                </div>
                <div class=""  style="display:none">
                  Discount:
                  <span style="float:right;" id="discount-{Counter}"><xsl:value-of select="DisplayDiscountPrice" /></span>
                </div>
                <div class="">
                  <!--Final Price:-->
                  <span  style="float:right;">
                    <strong>
                      <xsl:attribute name="id">
                        <xsl:text>final-price-</xsl:text>
                        <xsl:value-of select="Counter" />
                        <xsl:text>-</xsl:text>
                        <xsl:value-of select="UniqueID" />
                    </xsl:attribute>
                      <xsl:value-of select="DisplaySalesPrice" />
                    </strong>
                    
                    </span>
                </div>
              </div>
              
            </div>
            
          </xsl:for-each>
          
        </div>

        <style type="text/css">

          .bundle-product-modal{
          display: none;
          padding: 14px !important;

          }

          .bundle-product-row{
          min-height: 150px;
          border-bottom: 1px solid #B2B2B2;
          display:flex;
          padding:5px;
          }

          .bundle-product-col{
          display: inline-block;
          border: 0px solid #B2B2B2;
          margin:0;
          }

          .col-1{
          width: 25%;
          }
          .col-2{
          width: 50%;
          }
          .col-3{
          width: 25%;
          }

          .col-3 > div{
          margin:5px;
          }
          
          .bundle-matrix-group-attribute-elements-container{
          display: inline-block;
          margin: 3px;
          }
          .bundle-error-message-per-row{
            padding: 4px;
            border: 1px solid #F9B1B1;
            background: #FFFAFA;
            border-radius: 4px;
            font-size: 0.8em;
          }
          
        </style>
        
        <script type="text/javascript" src="jscripts/product_bundle.js"></script>
        <script type="text/javascript">
          $(document).ready(function(){
            //[0] = 'productpage'
            //[1] = 'shoppingcart'
            //[2] = 'wishlist'
       
              function sourceSwitchMethod(arrayFunctions){
                switch(sourceCaller)
                {
                  case 'productpage': {  arrayFunctions[0]();}break;
                  case 'shoppingcart': {  arrayFunctions[1]();}break;
                  case 'wishlist': {  arrayFunctions[2]();}break;
                }
              }
              var hasMatrixItems = false;
              <xsl:for-each select="FIELD/BundleProduct/Items/Item">
                <xsl:if test="ItemType = 'Matrix Group'">
                    hasMatrixItems = true;
                </xsl:if>
              </xsl:for-each>
              
              var sourceCaller = '<xsl:value-of select="FIELD/BundleProduct/SourceCaller"></xsl:value-of>';
              var counter = <xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />;
              var bundleCode ='<xsl:value-of select="FIELD/BundleProduct/BundleCode"></xsl:value-of>';
              var bundleModalID = '';
              var guid = '<xsl:value-of select="FIELD/BundleProduct/Guid"></xsl:value-of>';
              var bundleProduct_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" /> = new BundleProduct();
              var bundle = bundleProduct_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />;
              
              //For ShoppingCart and WishList Only
              var bundleHeaderID = '';
              var bundleModalFormUpdateID = '#form-bundle-update-' + counter + '-' + bundleHeaderID;
              var shoppingCartDisplayedMatrixGroups = [];
              
              var shoppingCartMatrixItems = [];
              <xsl:for-each select="FIELD/BundleProduct/ShoppingCart/ShoppingCartItem">
                shoppingCartMatrixItems.push({isDisplayed : false , shoppingCartRecID : <xsl:value-of select="ShoppingCartRecID" disable-output-escaping="yes" /> , itemCode : '<xsl:value-of select="ItemCode" disable-output-escaping="yes" />' , bundleMatrixItemSelected : '<xsl:value-of select="BundleMatrixItemSelected" disable-output-escaping="yes" />' });
              </xsl:for-each>
         
           
              
              //For ProductOnly
              var formAddToCartValid = false;
                
              sourceSwitchMethod(
              [
                function(){  bundleModalID = '#bundle-product-modal-' + counter; },
                function(){
                  bundleModalID = '#bundle-product-modal-' + counter + '-<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID"></xsl:value-of>'; 
                  bundleHeaderID = '<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID"></xsl:value-of>';
                },
                function(){ 
                  bundleModalID = '#bundle-product-modal-' + counter + '-<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID"></xsl:value-of>';
                  bundleHeaderID = '<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID"></xsl:value-of>';
                }
              ]);
              
            var modalDialog = $(bundleModalID).dialog({
              width: 800 , 
              autoOpen: false,
              modal: true,
              draggable: false,
              resizable: false,
              title: "&lt;h1 style='margin: 0px;'&gt;Bundle Items&lt;/h1&gt;",
            });
            
            var modalButtons =[];
            
            sourceSwitchMethod(
            [
              function(){//productpage
                 
                 $(bundleModalID).dialog().bind('dialogclose', function(event) {});//end dialog
                 
                 modalButtons.push({
                  text: "Close",
                  "class": 'btn btn-default',
                  click: function(){$(this).dialog('close');}
                });
                
                $(bundleModalID).dialog('option', {buttons : modalButtons} );
                
              
              },
              function(){//shoppingcart
                if(hasMatrixItems){
                  modalButtons.push({
                    text: "Update",
                    "class": 'btn btn-default',
                    click: function(){
                      var validate = bundle.validate();
                      if(validate.isValid){
                        var quantity = $('#Quantity_' + bundleCode +'_'+ bundleHeaderID);
                        var formAction = "addbundletocart.aspx?ReturnUrl=shoppingCart.aspx&amp;ProductID=" + counter;
                        var params = { Items: validate.items, BundleCode: validate.bundleCode };
                        params = JSON.stringify(params);
                        var decodedParams = decodeURIComponent(params);
                        formAction = decodeURIComponent(formAction);
                 
                        if (formAction.indexOf("Items[]") > -1) {
                            formAction = formAction.substring(0, formAction.indexOf("Items[]"));
                        }
          
                        if (formAction[formAction.length - 1] != "&amp;") {
                            formAction += "&amp;";
                        }
                      
                        formAction += 'Bundle=' + decodedParams;
                        formAction += '&amp;Source=' + sourceCaller;
                        formAction += '&amp;Quantity=' + quantity.val();
                        formAction += '&amp;BundleHeaderID=' + bundleHeaderID;
                     
                       $(bundleModalFormUpdateID).attr({'action' : formAction});
                       $(bundleModalFormUpdateID).submit();
                       $(this).dialog('close');
                      }
                    }
                  });
                }
                
                 
                modalButtons.push({
                  text: "Close",
                  "class": 'btn btn-default',
                  click: function(){$(this).dialog('close');}
                });
                
                $(bundleModalID).dialog('option', {buttons : modalButtons} );
                
                var formUpdate = $('&lt;form/&gt;').attr({'id' : bundleModalFormUpdateID.replace('#','') , 'method' : 'post'});
                formUpdate.appendTo($(bundleModalID));
                
              },
              function(){//wishlist
                if(hasMatrixItems){
                  modalButtons.push({
                    text: "Update",
                    "class": 'btn btn-default',
                    click: function(){
                      var validate = bundle.validate();
                      if(validate.isValid){
                        var quantity = $('#Quantity_' + bundleCode +'_'+ bundleHeaderID);
                        var formAction = "addbundletocart.aspx?ReturnUrl=shoppingCart.aspx&amp;ProductID=" + counter;
                        var params = { Items: validate.items, BundleCode: validate.bundleCode };
                        params = JSON.stringify(params);
                        var decodedParams = decodeURIComponent(params);
                        formAction = decodeURIComponent(formAction);
                 
                        if (formAction.indexOf("Items[]") > -1) {
                            formAction = formAction.substring(0, formAction.indexOf("Items[]"));
                        }
          
                        if (formAction[formAction.length - 1] != "&amp;") {
                            formAction += "&amp;";
                        }
                      
                        formAction += 'Bundle=' + decodedParams;
                        formAction += '&amp;Source=' + sourceCaller;
                        formAction += '&amp;Quantity=' + quantity.val();
                        formAction += '&amp;BundleHeaderID=' + bundleHeaderID;
                     
                        $(bundleModalFormUpdateID).attr({'action' : formAction});
                        $(bundleModalFormUpdateID).submit();
                        $(this).dialog('close');
                      }
                    }
                  });
                }
                 
                modalButtons.push({
                  text: "Close",
                  "class": 'btn btn-default',
                  click: function(){$(this).dialog('close');}
                });
                
                $(bundleModalID).dialog('option', {buttons : modalButtons} );
                
                var formUpdate = $('&lt;form/&gt;').attr({'id' : bundleModalFormUpdateID.replace('#','') , 'method' : 'post'});
                formUpdate.appendTo($(bundleModalID));
              }
              
            ]);
            
          
            function matrixGroupSelectChange(item){
              item.ElementsAttributesChangedEventTrigger();
            }
          
            
            //***** Always set these attributes
            bundle.bundle = {
              Guid : '<xsl:value-of select="FIELD/BundleProduct/Guid"></xsl:value-of>',
              Counter : counter,
              BundleCode : bundleCode,
              TotalPrice : <xsl:value-of select="FIELD/BundleProduct/TotalPrice" disable-output-escaping="yes" />,
              DisplayTotalPrice : '<xsl:value-of select="FIELD/BundleProduct/DisplayTotalPrice" disable-output-escaping="yes" />',
              MiniCartImageSrc : '<xsl:value-of select="FIELD/BundleProduct/MiniCartImageSrc" disable-output-escaping="yes" />',
              IconImageSrc : '<xsl:value-of select="FIELD/BundleProduct/IconImageSrc" disable-output-escaping="yes" />', 
              MediumImageSrc : '<xsl:value-of select="FIELD/BundleProduct/MediumImageSrc" disable-output-escaping="yes" />'
            };
            bundle.settings = {
              TargetAddToCartForm : $('#AddToCartForm_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />'),
              TargetAddToCartButton : $('#AddToCart_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />'),
              TargetAddToWishListButton : $('#AddToWishList_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />'),
              TargetBundlePrice : null,
              TargetBundlePriceExt : null,
              TargetBundleQuantity : null,
              StockHint : { InStockSrc : 'images/instock.png' , OutOfStockSrc : 'images/outofstock.png'},
              MessageMatrixItemNotFound : 'Please choose from the attribute(s) of this item',
            };
            
           
            
            
            sourceSwitchMethod(
            [
              function(){//productpage
              
                //*****Set Element for Total Price
                bundle.settings.TargetBundlePrice = $('#bundle-product-price-<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                bundle.settings.TargetBundleQuantity = $('#Quantity<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                
                //*****Set Element to Trigger Modal
                var btnViewDetail = $('#btn-bundle-view-details-<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                btnViewDetail.click(function(e){
                  modalDialog.dialog('open');
                });
              
                //*****Overwrites Product Price
                var lblProductPrice = $('span#lblPrice_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                lblProductPrice.empty();
                lblProductPrice.text('<xsl:value-of select="FIELD/BundleProduct/DisplayTotalPrice" disable-output-escaping="yes" />');
                lblProductPrice.load(function() {
                  lblProductPrice.text('<xsl:value-of select="FIELD/BundleProduct/DisplayTotalPrice" disable-output-escaping="yes" />');
                });
                
                //*****Overwrites Product Add To Cart Form Action URL
                var formAddToCart =  $('#AddToCartForm_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                var formAction = formAddToCart.attr('action');
                formAction = formAction.replace("addtocart.aspx", "addbundletocart.aspx");
                formAddToCart.attr('action',formAction);
                
                //*****Overwrites Prodcuct Add To Cart Button Click Event
                var buttonAddToCart =  $('#AddToCart_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
                var buttonAddToWishList =  $('#AddToWishList_<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />');
               
                buttonAddToCart.click(function(e){
                  submitClick('addtocart',e);
                });
                buttonAddToWishList.click(function(e){
                  submitClick('addtowishlist',e);
                });
          
       
            
    
                
                function submitClick(source,e){
                
                    var validate = bundle.validate();
                    formAddToCartValid = validate.isValid;
                    if(formAddToCartValid){
                      var quantity = $('#Quantity' + counter);
                      var params = { Items: validate.items, BundleCode: validate.bundleCode };
                      params = JSON.stringify(params);
                      var decodedParams = decodeURIComponent(params);
                      formAction = decodeURIComponent(formAction);
                 
                      if (formAction.indexOf("Items[]") > -1) {
                          formAction = formAction.substring(0, formAction.indexOf("Items[]"));
                      }
          
                      if (formAction[formAction.length - 1] != "&amp;") {
                          formAction += "&amp;";
                      }
                      formAction = formAction.replace("addtocart.aspx", "addbundletocart.aspx");
                      formAction += 'Bundle=' + decodedParams;
                      formAction += '&amp;Source=' + sourceCaller;
                      formAction += '&amp;Quantity=' + quantity.val();
                      formAction += '&amp;ClickSource=' + source;
                      formAddToCart.attr('action',formAction);
                      formAddToCart.submit();
                    }
                    else{
                 
                      <!--if($(modalDialog).dialog( "isOpen" ) == false){
                        modalDialog.dialog('open');
                        formAddToCartValid = false;
                      }-->
                  
                    }
                
                }

                  
              },
              function(){//shoppingcart
                //*****Set Element for Total Price
                ///Quantity_ITEM-000321_1
                //bundle-total-price-ITEM-000321-1 === bundlecode bundleheaderid
                //bundleHeaderID
                bundle.settings.TargetBundlePrice = $('#bundle-total-price-' + bundle.bundle.BundleCode + '-' + bundleHeaderID);
                bundle.settings.TargetBundlePriceExt =  $('#bundle-total-price-ext-' + bundle.bundle.BundleCode + '-' + bundleHeaderID);
                bundle.settings.TargetBundleQuantity = $('#Quantity_' + bundle.bundle.BundleCode + '_' + bundleHeaderID);
              
                //*****Set Element to Trigger Modal
                var btnViewDetail = $('#btn-bundle-view-details-<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />-<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID" disable-output-escaping="yes" />');
                 btnViewDetail.click(function(e){
                  modalDialog.dialog('open');
                 });
                 
              },
              function(){//wishlist
                //*****Set Element to Trigger Modal
                
                var btnViewDetail = $('#btn-bundle-view-details-<xsl:value-of select="FIELD/BundleProduct/Counter" disable-output-escaping="yes" />-<xsl:value-of select="FIELD/BundleProduct/BundleHeaderID" disable-output-escaping="yes" />');
                btnViewDetail.click(function(e){
                  modalDialog.dialog('open');
                });
              }
              
            ]);
            
            function resetSelectMatrixGroup(element){
              var target = element.attr('customDataTarget');
            
              if(target != null){
                $('#' +target).prop('disabled','disabled');
                $('#' +target).find("option:gt(0)").remove();
                resetSelectMatrixGroup($('#' +target));
              }
            }
            
            function selectMatrixGroupChanged(element , lineNum ,item , includeLastElement ){
              if(element.attr('customDataByPassChange') == true){return;}
              if (item.ElementErrorContainer != undefined) 
              {
                item.ElementErrorContainer.element.hide();
              }
              var selectedValue = element.val();
              var targetElement = $('#' + element.attr('customDataTarget'));
              var listSelect =  null;
              
                 
              sourceSwitchMethod(
              [
                function(){
                 listSelect =  $(bundleModalID + ' #bundle-matrix-group-attribute-container-' + counter + '-' + lineNum + '-' + item.UniqueID +  ' select:not([disabled])');
                },
                function(){
                  listSelect =  $(bundleModalID + ' #bundle-matrix-group-attribute-container-' + counter + '-' + item.Counter + '-' + bundleHeaderID + '-' + item.UniqueID  + ' select:not([disabled])');
                },
                function(){
                  listSelect =  $(bundleModalID + ' #bundle-matrix-group-attribute-container-' + counter + '-' + item.Counter + '-' + bundleHeaderID + '-' + item.UniqueID + ' select:not([disabled])');
                }
              ])
              
              
              resetSelectMatrixGroup(element);
              
              if(element.attr('customDataAttributeCode') == element.val())
              {
                return;
              }
              
              var selectedAttributes = [];
              for(var selectIndex=0; selectIndex &lt; listSelect.length; selectIndex++)
              {
                var attributeCode = $(listSelect[selectIndex]).attr('customDataAttributeCode');
                var attributeValueCode = $(listSelect[selectIndex]).val();
                if(attributeCode != attributeValueCode)
                {
                  selectedAttributes.push({AttributeCode : attributeCode, AttributeValueCode  : $(listSelect[selectIndex]).val() });
                }
              
              }
              if(includeLastElement == true)
              {
                selectedAttributes.push({AttributeCode : element.attr('customDataAttributeCode'), AttributeValueCode  :element.val() });
              }
              
              var positionID = element.attr('customDataPositionID');
              if(positionID &lt; item.Attributes.length)
              {
                var attributeCode = item.Attributes[positionID].AttributeCode;
                for(var valueIndex=0; valueIndex &lt; item.Attributes[positionID].Values.length; valueIndex++)
                {
                  var valueCode = item.Attributes[positionID].Values[valueIndex].AttributeValueCode;
                  var valueDesc = item.Attributes[positionID].Values[valueIndex].AttributeValueDescription;
                  selectedAttributes.push({AttributeCode : attributeCode , AttributeValueCode  :  valueCode});
                       
                  for(var matrixItemIndex=0; matrixItemIndex &lt; item.MatrixItems.length; matrixItemIndex++)
                  {
                    if(bundle.doesMatrixItemHasAttribute(item.MatrixItems[matrixItemIndex] , selectedAttributes))
                    {
                      var option = $('&lt;option/&gt;').text(valueDesc).val(valueCode);
                      $(targetElement).append(option);
                      break;
                    }
                  }
                  
                  selectedAttributes.splice(selectedAttributes.length - 1, 1);
                }
                  
              }
              else
              {
                for(var matrixItemIndex=0; matrixItemIndex &lt; item.MatrixItems.length; matrixItemIndex++)
                {
                  if(bundle.doesMatrixItemHasAttribute(item.MatrixItems[matrixItemIndex] , selectedAttributes))
                  {
                    if(bundle.doesMatrixItemHasAttribute(item.MatrixItems[matrixItemIndex] , selectedAttributes))
                    {
                      var matrixItem = item.MatrixItems[matrixItemIndex];
                      
                      var freeStock = bundle.getFreeStock(matrixItem.MatrixItemCode , item.UnitMeasureCode );
                     //   $(bundleModalID + ' #img-bundle-sub-product-image-modal-'+counter+'-' + lineNum).attr({src : matrixItem.IconImageSrc});
                      //  $(bundleModalID + ' #img-bundle-sub-product-stockhint-'+counter+'-'+ lineNum).attr({src : freeStock > 0 ? bundle.settings.StockHint.InStockSrc : bundle.settings.StockHint.OutOfStockSrc});
                      //  $(bundleModalID + ' #final-price-' + item.Counter + ).text(matrixItem.DisplayFinalPrice);
                        
                        //img-bundle-sub-product-image-modal-318-1-0
                            $(bundleModalID + ' #img-bundle-sub-product-image-modal-'+counter+'-' + lineNum + '-' + item.UniqueID).attr({src : matrixItem.IconImageSrc});
                            $(bundleModalID + ' #img-bundle-sub-product-stockhint-'+counter+'-'+ lineNum + '-' + item.UniqueID).attr({src : freeStock > 0 ? bundle.settings.StockHint.InStockSrc : bundle.settings.StockHint.OutOfStockSrc});
                            $(bundleModalID + ' #final-price-' + item.Counter + '-' + item.UniqueID).text(matrixItem.DisplayFinalPrice);
                        
                        sourceSwitchMethod(
                        [
                          function(){
                        
                          },
                          function(){
                           
                          },
                          function(){
                            
                          }
                        ])
                     
                    }
                    break;
                  }
                }
               
              }
            
              var currentTotalPrice = bundle.getCurrentBundleTotalPrice();
              updateCurrentBundlePrice(currentTotalPrice);
             
              
              
              
              $(targetElement).prop('disabled',null);
            }
        
          
            <xsl:for-each select="FIELD/BundleProduct/Items/Item">
              <xsl:sort select="LineNum"/>
               
              var itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" /> =
              {
              
                Counter : <xsl:value-of select="Counter" disable-output-escaping="yes" />,
                ItemCode : '<xsl:value-of select="ItemCode" disable-output-escaping="yes" />',
                LineNum : <xsl:value-of select="LineNum" disable-output-escaping="yes" />,
                FreeStock : <xsl:value-of select="FreeStock" disable-output-escaping="yes" />,
                SalesPrice : <xsl:value-of select="SalesPrice" disable-output-escaping="yes" />,
                ItemType : '<xsl:value-of select="ItemType" disable-output-escaping="yes" />',
                Quantity : <xsl:value-of select="Quantity" disable-output-escaping="yes" />,
                UnitMeasureCode : '<xsl:value-of select="UnitMeasureCode" disable-output-escaping="yes" />',
                MiniCartImageSrc : '<xsl:value-of select="MiniCartImageSrc" disable-output-escaping="yes" />',
                IconImageSrc : '<xsl:value-of select="IconImageSrc" disable-output-escaping="yes" />', 
                MediumImageSrc : '<xsl:value-of select="MediumImageSrc" disable-output-escaping="yes" />',
                
              };
              <xsl:if test="ItemType = 'Matrix Group'">
           
                
                sourceSwitchMethod(
                [
                  function(){
                    itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["ElementErrorContainer"] = { element :  $('#error-message-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-<xsl:value-of select="LineNum" disable-output-escaping="yes" />') , property : 'text'};
                     itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["UniqueID"] = <xsl:value-of select="UniqueID" disable-output-escaping="yes" />;
                  },
                  function(){
                    itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["ElementErrorContainer"] = { element :  $('#error-message-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-<xsl:value-of select="Counter" disable-output-escaping="yes" />-' + bundleHeaderID) , property : 'text'};
                     itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["UniqueID"] = <xsl:value-of select="UniqueID" disable-output-escaping="yes" />;
                  },
                  function(){
                    itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["ElementErrorContainer"] = { element :  $('#error-message-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-<xsl:value-of select="Counter" disable-output-escaping="yes" />-' + bundleHeaderID) , property : 'text'};
                     itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["UniqueID"] = <xsl:value-of select="UniqueID" disable-output-escaping="yes" />;
                  }
                ])
                
              
                var itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />_Attributes = [];
                var itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />_MatrixItems = [];
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["DefaultSelectedMatrixItemCode"] = '<xsl:value-of select="DefaultSelectedMatrixItemCode" disable-output-escaping="yes" />';

                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["callBackGetSelectedElementsAttributes"] =  function(){
                  var selectedAttributes = [];
                  for(var i=0; i &lt; this.ElementsAttributes.length;i++ )
                  {
                    var code = $(this.ElementsAttributes[i].children()[0]).val();
                    var value = this.ElementsAttributes[i].find(":selected").val();
                    if(code == value){continue;}
                    selectedAttributes.push({AttributeCode : code, AttributeValueCode : value });
                  }
                  return selectedAttributes;
                }

                //***** Fill Attributes
                <xsl:for-each select="Attributes/Attribute">
                  itemLineNum_<xsl:value-of select="../../../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="../../LineNum" disable-output-escaping="yes" />_Attributes.push({
                    PositionID : <xsl:value-of select="PositionID" disable-output-escaping="yes" />,
                    AttributeCode : '<xsl:value-of select="AttributeCode" disable-output-escaping="yes" />',
                    AttributeDescription : '<xsl:value-of select="AttributeDescription" disable-output-escaping="yes" />',
                    Values :
                    [
                      <xsl:for-each select="Value">
                        {
                          AttributeValueCode : '<xsl:value-of select="AttributeValueCode" disable-output-escaping="yes" />',
                          AttributeValueDescription : '<xsl:value-of select="AttributeValueDescription" disable-output-escaping="yes" />',
                        },
                      </xsl:for-each>
                    ]
                  });
                </xsl:for-each>


                //***** Fill Matrix Items
                <xsl:for-each select="MatrixItems/MatrixItem">
                   itemLineNum_<xsl:value-of select="../../../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="../../LineNum" disable-output-escaping="yes" />_MatrixItems.push({
                    Counter : <xsl:value-of select="Counter" disable-output-escaping="yes" />,
                    MatrixItemCode : '<xsl:value-of select="MatrixItemCode" disable-output-escaping="yes" />',
                    Attribute1 : '<xsl:value-of select="Attribute1" disable-output-escaping="yes" />',
                    Attribute2 : '<xsl:value-of select="Attribute2" disable-output-escaping="yes" />',
                    Attribute3 : '<xsl:value-of select="Attribute3" disable-output-escaping="yes" />',
                    Attribute4 : '<xsl:value-of select="Attribute4" disable-output-escaping="yes" />',
                    Attribute5 : '<xsl:value-of select="Attribute5" disable-output-escaping="yes" />',
                    Attribute6 : '<xsl:value-of select="Attribute6" disable-output-escaping="yes" />',
                    AttributeCode1 : '<xsl:value-of select="AttributeCode1" disable-output-escaping="yes" />',
                    AttributeCode2 : '<xsl:value-of select="AttributeCode2" disable-output-escaping="yes" />',
                    AttributeCode3 : '<xsl:value-of select="AttributeCode3" disable-output-escaping="yes" />',
                    AttributeCode4 : '<xsl:value-of select="AttributeCode4" disable-output-escaping="yes" />',
                    AttributeCode5 : '<xsl:value-of select="AttributeCode5" disable-output-escaping="yes" />',
                    AttributeCode6 : '<xsl:value-of select="AttributeCode6" disable-output-escaping="yes" />',
                    MiniCartImageSrc : '<xsl:value-of select="MiniCartImageSrc" disable-output-escaping="yes" />',
                    IconImageSrc : '<xsl:value-of select="IconImageSrc" disable-output-escaping="yes" />',
                    MediumImageSrc : '<xsl:value-of select="MediumImageSrc" disable-output-escaping="yes" />',
                    RegularPrice: <xsl:value-of select="RegularPrice" disable-output-escaping="yes" />,
                    DisplayRegularPrice : '<xsl:value-of select="DisplayRegularPrice" disable-output-escaping="yes" />',
                    FinalPrice: <xsl:value-of select="FinalPrice" disable-output-escaping="yes" />,
                    DisplayFinalPrice : '<xsl:value-of select="DisplayFinalPrice" disable-output-escaping="yes" />'
                    
               
                  });
                </xsl:for-each>
                
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["Attributes"] = itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />_Attributes;
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["MatrixItems"] = itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />_MatrixItems;
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["ElementsAttributes"] = [];
              
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["ElementsAttributesChangedEventTrigger"] = function(){
                //here

                };

           

             
                
                itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />["LoadAttributes"] = function(){

                  var item = this;
                  
                  sourceSwitchMethod(
                  [
                    function(){
                      for(var i=0; i &lt; item.Attributes.length; i++)
                      {
                
                        var attribute = item.Attributes[i];
                        var positionID = attribute.PositionID;
                        var id = 'select-matrix-attribute-' + counter;
                        var select = $('&lt;select/&gt;').attr(
                        {
                          id :id + '-' + '<xsl:value-of select="LineNum" disable-output-escaping="yes" />' + '-' + positionID + '-' + '<xsl:value-of select="UniqueID" disable-output-escaping="yes" />' , 
                          customDataPositionID : positionID, 
                          customDataAttributeCode : attribute.AttributeCode, 
                          customDataTarget : i ==  item.Attributes.length - 1 ? null : id + '-' + '<xsl:value-of select="LineNum" disable-output-escaping="yes" />' + '-' + (positionID + 1) + '-' + '<xsl:value-of select="UniqueID" disable-output-escaping="yes" />',
                          customDataByPassChange : false
                        });
                        var optionDefault = $('&lt;option/&gt;').text('Select ' + attribute.AttributeDescription).val(attribute.AttributeCode);
                        select.append(optionDefault);
                        item.ElementsAttributes.push(select);
                        
                        if(i > 0)
                        {
                          select.prop('disabled', 'disabled');
                        }
                        else
                        {
                            for(var valueIndex=0; valueIndex &lt; attribute.Values.length; valueIndex++)
                            {
                              var option = $('&lt;option/&gt;').text(attribute.Values[valueIndex].AttributeValueDescription).val(attribute.Values[valueIndex].AttributeValueCode);
                              select.append(option);
                            }
                      
                    
                        }
                          select.bind( "change", function(e) { selectMatrixGroupChanged($(this),<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item ,false );});
                  
                        $(bundleModalID + ' #bundle-matrix-group-attribute-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-<xsl:value-of select="LineNum" disable-output-escaping="yes" />-<xsl:value-of select="UniqueID" disable-output-escaping="yes" />').append($("&lt;div class='bundle-matrix-group-attribute-elements-container' /&gt;").append(select));
                      }
                    },
                    
                    function(){
                    
                      var listSelect =  $(bundleModalID + ' #bundle-matrix-group-attribute-container-' + counter + '-' + item.Counter + '-' + bundleHeaderID + '-' + item.UniqueID + ' select');  
                      for(var i=0; i &lt; item.Attributes.length; i++)
                      {
                
                        var attribute = item.Attributes[i];
                        var positionID = attribute.PositionID;
                        var id = 'select-matrix-attribute-' + counter;
                        var customDataTargetID =  i ==  item.Attributes.length - 1 ? null : id + '-' + bundleHeaderID + '-' +  item.Counter +  '-' + (positionID + 1) + '-' + '<xsl:value-of select="UniqueID" disable-output-escaping="yes" />';
                        var select = $('&lt;select/&gt;').attr(
                        {
                          id :id + '-' + bundleHeaderID + '-' + item.Counter +  '-' + positionID  + '-' + '<xsl:value-of select="UniqueID" disable-output-escaping="yes" />', 
                          customDataPositionID : positionID, 
                          customDataAttributeCode : attribute.AttributeCode, 
                          customDataTarget :customDataTargetID,
                          customDataByPassChange : false
                        });
                        
                        var optionDefault = $('&lt;option/&gt;').text('Select ' + attribute.AttributeDescription).val(attribute.AttributeCode);
                        select.append(optionDefault);
                        item.ElementsAttributes.push(select);
                        
                        var selectedFound = false;
                        for(var valueIndex=0; valueIndex &lt; attribute.Values.length; valueIndex++)
                        {
                          var option = $('&lt;option/&gt;').text(attribute.Values[valueIndex].AttributeValueDescription).val(attribute.Values[valueIndex].AttributeValueCode);
                          select.append(option);
                          
                        }
                        
                        select.bind( "change", function(e) { selectMatrixGroupChanged($(this),<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item , false  );});
                        if(item.Attributes.length - 1 == i)
                        {
                          selectMatrixGroupChanged(select,<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item , true);
                        }
                      
                        $(bundleModalID + ' #bundle-matrix-group-attribute-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-' + item.Counter + '-' +  bundleHeaderID + '-' + '<xsl:value-of select="UniqueID" disable-output-escaping="yes" />' ).append($("&lt;div class='bundle-matrix-group-attribute-elements-container' /&gt;").append(select));
                      }
                      
                      var shoppingCartRecID = null;
             
                       for(var elementIndex=0; elementIndex &lt;  item.ElementsAttributes.length; elementIndex++)
                       {
                          var select = item.ElementsAttributes[elementIndex];
                          for(var cartIndex=0; cartIndex &lt; shoppingCartMatrixItems.length; cartIndex++)
                          {
                          
                            if(shoppingCartMatrixItems[cartIndex].itemCode == item.ItemCode &amp;&amp; shoppingCartMatrixItems[cartIndex].isDisplayed == false)
                            {
                              if(shoppingCartRecID == null)
                              {
                                shoppingCartRecID = shoppingCartMatrixItems[cartIndex].shoppingCartRecID ;
                              }
                              
                              
                              var matrixItemFound = bundle.findMatrixItems(item.MatrixItems, shoppingCartMatrixItems[cartIndex].bundleMatrixItemSelected);
                              if(matrixItemFound != null)
                              {
                                var matrixItemAttributesFound = bundle.getAttributes(matrixItemFound);
                                
                                for(var matrixItemAttributesFoundIndex=0; matrixItemAttributesFoundIndex &lt; matrixItemAttributesFound.length; matrixItemAttributesFoundIndex++)
                                {
                                  if(select.attr('value') != matrixItemAttributesFound[matrixItemAttributesFoundIndex].AttributeCode) continue;
                                  select.val(matrixItemAttributesFound[matrixItemAttributesFoundIndex].AttributeValueCode);
                                }
                              
                              }
                              break;
                            }
                          }
                          if(item.ElementsAttributes.length - 1 == elementIndex)
                          {
                            selectMatrixGroupChanged(select,<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item , true);
                          }
                       }
            
                      if(shoppingCartRecID != null)
                      {
                        for(var cartIndex=0; cartIndex &lt; shoppingCartMatrixItems.length; cartIndex++)
                        {
                          if(shoppingCartRecID ==shoppingCartMatrixItems[cartIndex].shoppingCartRecID)
                          {
                            shoppingCartMatrixItems[cartIndex].isDisplayed = true;
                            item["ShoppingCartRecID"] = shoppingCartMatrixItems[cartIndex].shoppingCartRecID;
                            break;
                          }
                        }
                      }
                     
                    
                       
                     
                    
                    },
                    function(){
                        var shoppingCartMatrixItems = [];
                      <xsl:for-each select="../../WishCart/WishCartItem">
                        shoppingCartMatrixItems.push({itemCode : '<xsl:value-of select="ItemCode" disable-output-escaping="yes" />' , bundleMatrixItemSelected : '<xsl:value-of select="BundleMatrixItemSelected" disable-output-escaping="yes" />' });
                      </xsl:for-each>
                      var listSelect =  $(bundleModalID + ' #bundle-matrix-group-attribute-container-' + counter + '-' + bundleHeaderID + ' select');  
                    
                      for(var i=0; i &lt; item.Attributes.length; i++)
                      {
                
                        var attribute = item.Attributes[i];
                        var positionID = attribute.PositionID;
                        var id = 'select-matrix-attribute-' + counter;
                        var select = $('&lt;select/&gt;').attr(
                        {
                          id :id + '-' + '<xsl:value-of select="LineNum" disable-output-escaping="yes" />' + '-' + positionID , 
                          customDataPositionID : positionID, 
                          customDataAttributeCode : attribute.AttributeCode, 
                          customDataTarget : i ==  item.Attributes.length - 1 ? null : id + '-' + '<xsl:value-of select="LineNum" disable-output-escaping="yes" />' + '-' + (positionID + 1),
                          customDataByPassChange : false
                        });
                        var optionDefault = $('&lt;option/&gt;').text('Select ' + attribute.AttributeDescription).val(attribute.AttributeCode);
                        select.append(optionDefault);
                        item.ElementsAttributes.push(select);
                        
                        var matrixItemAttributesFound = null;
                        for(var cartIndex=0; cartIndex &lt; shoppingCartMatrixItems.length; cartIndex++)
                        {
                          if(shoppingCartMatrixItems[cartIndex].itemCode == item.ItemCode){
                            var matrixItemFound = bundle.findMatrixItems(item.MatrixItems, shoppingCartMatrixItems[cartIndex].bundleMatrixItemSelected);
                            if(matrixItemFound != null)
                            {
                              matrixItemAttributesFound = bundle.getAttributes(matrixItemFound);
                            }
                            break;
                          }
                        }
                        
                        var selectedFound = false;
                        for(var valueIndex=0; valueIndex &lt; attribute.Values.length; valueIndex++)
                        {
                          var option = $('&lt;option/&gt;').text(attribute.Values[valueIndex].AttributeValueDescription).val(attribute.Values[valueIndex].AttributeValueCode);
                          select.append(option);
                          
                          if(selectedFound == false)
                          {
                            var attributeValueCode = attribute.Values[valueIndex].AttributeValueCode;
                            var attributeCode = attribute.AttributeCode;
                          
                            for(var attribIndex=0; attribIndex &lt; matrixItemAttributesFound.length; attribIndex++)
                            {
                              if(matrixItemAttributesFound[attribIndex].AttributeCode == attributeCode &amp;&amp; matrixItemAttributesFound[attribIndex].AttributeValueCode == attributeValueCode){
                                selectedFound = true;
                                option.attr('selected','selected');
                                break;
                              }
                            }
                          }
                        }
                        
                        select.bind( "change", function(e) { selectMatrixGroupChanged($(this),<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item , false  );});
                        if(item.Attributes.length -1 == i)
                        {
                          selectMatrixGroupChanged(select,<xsl:value-of select="LineNum" disable-output-escaping="yes" />,item , true);
                        }
                  
                        $(bundleModalID + ' #bundle-matrix-group-attribute-container-<xsl:value-of select="../../Counter" disable-output-escaping="yes" />-' + bundleHeaderID).append($("&lt;div class='bundle-matrix-group-attribute-elements-container' /&gt;").append(select));
                      }
                      
                    }
                  ]);
                }
                
              
              
              </xsl:if>
              bundleProduct_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />.addItem(itemLineNum_<xsl:value-of select="../../Counter" disable-output-escaping="yes" />_<xsl:value-of select="LineNum" disable-output-escaping="yes" />); //LineNum is unique
            </xsl:for-each>
          
          var stockHintSource =  bundle.doesBundleHasStock() ?  bundle.settings.StockHint.InStockSrc : bundle.settings.StockHint.OutOfStockSrc;
          $('#img-stockhint-'+bundle.bundle.Counter.toString()).attr({src : stockHintSource});
       
          updateCurrentBundlePrice(bundle.getCurrentBundleTotalPrice());
          function updateCurrentBundlePrice(currentTotalPrice)
          {
             sourceSwitchMethod(
              [
                function(){
                  bundle.settings.TargetBundlePrice.text(currentTotalPrice.display);
                },
                function(){
                  bundle.settings.TargetBundlePrice.text(currentTotalPrice.display);
                  var quantity = parseInt(bundle.settings.TargetBundleQuantity.val()) ;
                  bundle.settings.TargetBundlePriceExt.text(bundle.getAmountCustomerCurrencyFormat(currentTotalPrice.value * quantity));
                },
                 function(){
                
                },
              ])
          }
          
           });//end document ready

        </script>

      </xsl:template>
      
      
    </xsl:stylesheet>
  </PackageTransform>
</package>



